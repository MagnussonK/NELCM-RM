service: nelcm-record-manager-backend

provider:
  name: aws
  runtime: python3.9
  region: us-east-1
  architecture: x86_64
  # Assign the explicitly defined role to all functions
  iam:
    role: IamRoleLambdaExecution
  httpApi:
    cors: true
  environment:
    LD_LIBRARY_PATH: /var/task/lib
    ODBCSYSINI: /var/task
    SQS_QUEUE_URL: !Ref RenewalEmailQueue
  ecr:
    images:
      appimage:
        path: ./
        platform: linux/amd64
  vpc:
    securityGroupIds:
      - sg-0538cfedbe5d23eb5

    subnetIds:
      - subnet-06ca61fce5f705db2
      - subnet-01ae22cae3a9c51f5

functions:
  api:
    image: appimage
    timeout: 5
    events:
      - httpApi:
          path: /api/{proxy+}
          method: any

  renewalEmailTrigger:
    image:
      name: appimage
      command:
        - renewal_trigger.handler
    events:
      - schedule: cron(0 12 1 * ? *)

  sesHandler:
    image:
      name: appimage
      command:
        - ses_handler.handler
    events:
      - sns: nelcm-ses-events

  emailSender:
    image:
      name: appimage
      command:
        - email_sender.handler
    timeout: 15
    events:
      - sqs:
          arn: !GetAtt RenewalEmailQueue.Arn
          batchSize: 5

resources:
  Resources:
    # --- 1. Define the SQS Queue First ---
    RenewalEmailQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${sls:stage}-renewal-email-queue

    # --- 2. Explicitly Define the IAM Role and its Permissions ---
    IamRoleLambdaExecution:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${sls:stage}-lambda-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
              
        # This role needs basic permissions to run in a VPC and write logs
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: ${self:service}-${sls:stage}-lambda-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "secretsmanager:GetSecretValue"
                  Resource: "arn:aws:secretsmanager:us-east-1:*:secret:nelcm-db-*"
                - Effect: Allow
                  Action:
                    - "ses:SendEmail"
                    - "ses:SendRawEmail"
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - "sqs:SendMessage"
                    - "sqs:ReceiveMessage" # emailSender needs this permission too
                    - "sqs:DeleteMessage"
                    - "sqs:GetQueueAttributes"
                  Resource: !GetAtt RenewalEmailQueue.Arn
            # --- 3. Make the Role explicitly depend on the Queue ---
      DependsOn:
        - RenewalEmailQueue
        
    SesApiVPCEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        VpcId: vpc-009272e02ccd8b01b # Your VPC ID
        # THIS IS THE CORRECT SERVICE NAME FOR THE BOTO3 API CLIENT
        ServiceName: com.amazonaws.${self:provider.region}.ses
        VpcEndpointType: Interface
        PrivateDnsEnabled: true
        SubnetIds:
          # Use subnets that you verified are supported
          - subnet-0e284d0f2a57f5501
          - subnet-01ae22cae3a9c51f5
        SecurityGroupIds:
          # A security group that allows inbound HTTPS from the Lambda's SG
          - sg-0538cfedbe5d23eb5